import { Injectable } from '@angular/core';
import { EngineService } from '../engine/engine.service';
import { MessageService } from './message.service';
import { FunctionService } from './function.service';
import * as Genetic from 'genetic-js';
import { Subscription } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class GeneticService {

  subscription: Subscription;

  genetic:Genetic;

  constructor(private engServ: EngineService, private MS: MessageService, private FS: FunctionService) {
    // subscribe to component messages
    this.subscription = this.MS.getMessage().subscribe(message => {
      
      if (message == 'start_ga_click') {
         this.createGenetic();
         this.startGenetic();
      }

    });

  }

  startGenetic() {

    let config = {
      "size": this.MS.genetic_config.size, //Population size
      "crossover": this.MS.genetic_config.crossover, //Probability of crossover
      "mutation": this.MS.genetic_config.mutation, //Probability of mutation
      "generations": this.MS.genetic_config.generations, //Maximum number of generations before finishing
      "fittestAlwaysSurvives": this.MS.genetic_config.fittestAlwaysSurvives, //Prevents losing the best fit between generations
      "maxResults": this.MS.genetic_config.maxResults, //The maximum number of best-fit results that webworkers will send per notification
      "webWorkers": this.MS.genetic_config.webWorkers, //Use Web Workers (when available)
      "skip": this.MS.genetic_config.skip //Setting this higher throttles back how frequently genetic.notification gets called in the main thread.
    };
    
    if(config.size == 0) {
      alert("Draw initial population to start Genetic Algorithm");
      return;
    }

    //make array of circle userData which contains id, position, radius and points count
    /*let circles:any = [];
    for (let i = 0; i < this.engServ.circleGroup.children.length; i++) {
      let circle:any = this.engServ.circleGroup.children[i];
      circles.push( circle.userData )
    }*/

		let userData = {
      //array of points in polygon { x : pointX, y : pointY, inCircle: 0 }
      "points_in_polygon" : this.MS.points_in_polygon, 
      "total_points_in_all_circles" : this.MS.total_points_in_all_circles,
      "radius" : this.MS.settings.circles_size / 2
      //array of circles
      /*"circles" : this.engServ.circleGroup.children,*/

      
    };
    
    this.genetic.evolve( config, userData );
    
  }

  createGenetic() {

        //let circle:Circle = new Circle(engServ, MS, FS);

        let genetic = Genetic.create();

        genetic.optimize = Genetic.Optimize.Maximize;
        
        genetic.select1 = Genetic.Select1.RandomLinearRank;
        genetic.select2 = Genetic.Select2.FittestRandom;


        //Called to create an individual, can be of any type (int, float, string, array, object)
        genetic.seed = function():any {
          console.log("seed");
          let  individual:any;
          
          let random:number = Math.floor(Math.random() * Math.floor( this.userData["points_in_polygon"].length - 1 ))
          random =  Math.floor(random / 3) * 3;
          random = Math.round( random );
          let points = this.userData["points_in_polygon"];
          let position = { x : points[ random ].x, y : points[ random ].y, inCircle : 0 };
    
          individual = position;
          //individual.push( this.userData["circles"][this.see].object.userData )

          return individual;
        };

        //Computes a fitness score for an individual
        genetic.fitness = function( individual ):number {
          console.log("fitness");
          let  fitness:number=0;

          let points = this.userData["points_in_polygon"];
          for (let i = 0; i < this.userData["points_in_polygon"].length; i++) {
            const pointX:number = points[i].x;
            const pointY:number = points[i].y;
            const distance:number = get_distance_between_points( individual.x, individual.y, pointX, pointY );
            //point is within circle
            if( distance <= this.userData["radius"] ) {   
              fitness++;   
            }
          }

          //line legth or distance between 2 points
          function get_distance_between_points( x1:number, y1:number, x2:number, y2:number ):number {
            const distanceBetweenPoints:number = Math.sqrt( Math.pow((x1-x2), 2) + Math.pow((y1-y2), 2) );
            return distanceBetweenPoints;    
          }

          return fitness;
        };

        //Called when an individual has been selected for mutation
        genetic.mutate = function( individual ):any {
          console.log("mutate");
          let  _individual:any;

          return _individual;          
        };

        //Called when two individuals are selected for mating. Two children should always returned
        genetic.crossover = function( mother, father ):any {
          console.log("crossover");
console.log(mother)
console.log(father)
          let son:any;
          let daughter:any;

          return [ son, daughter ];     
        };

        //Called for each generation. Return false to terminate end algorithm (ie- if goal state is reached)
        genetic.generation = function( pop, generation, stats ):boolean {
          console.log("generation");

          return true;
        };

        //Runs in the calling context. All functions other than this one are run in a web worker.
        genetic.notification = function( pop, generation, stats, isFinished ) {
          console.log("notification");
/*console.log(pop)
console.log(generation)
console.log(stats)
console.log(isFinished)*/
        };
    
        this.genetic = genetic;
  }
    

  
}
